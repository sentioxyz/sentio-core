# https://github.com/aalyria/api/blob/main/MODULE.bazel

module(
    name = "sentio-core",
    version = "1.0",
)

PROTOBUF_VERSION = "32.1"

PTYHON_VERSION = "3.11"

### Basic
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "rules_license", version = "1.0.0")
bazel_dep(name = "rules_pkg", version = "1.1.0")
bazel_dep(name = "bazel_skylib", version = "1.8.2")
bazel_dep(name = "aspect_bazel_lib", version = "2.21.2")

### PROTOCBUF
bazel_dep(name = "protobuf", version = PROTOBUF_VERSION)
bazel_dep(name = "toolchains_protoc", version = "0.5.0")
git_override(
    module_name = "toolchains_protoc",
    commit = "34bd51679bc8028b1758db80c085ed2d82402887",
    remote = "https://github.com/aspect-build/toolchains_protoc",
)

protoc = use_extension("@toolchains_protoc//protoc:extensions.bzl", "protoc")
protoc.toolchain(version = "v" + PROTOBUF_VERSION)
use_repo(protoc, "toolchains_protoc_hub")

register_toolchains("@toolchains_protoc_hub//:all")

### Others

bazel_dep(name = "rules_nodejs", version = "6.5.2")
bazel_dep(name = "rules_go", version = "0.57.0")
bazel_dep(name = "gazelle", version = "0.45.0")
bazel_dep(name = "bazel_gomock", version = "0.2.0")
bazel_dep(name = "googleapis", version = "0.0.0-20250826-a92cee39")
bazel_dep(name = "rules_python", version = "1.6.3")
bazel_dep(name = "rules_python_gazelle_plugin", version = "1.6.3")
bazel_dep(name = "rules_uv", version = "0.88.0")
bazel_dep(name = "aspect_rules_js", version = "2.6.0")
bazel_dep(name = "aspect_rules_ts", version = "3.7.0")
bazel_dep(name = "aspect_rules_py", version = "1.6.3")
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "rules_multirun", version = "0.13.0")
bazel_dep(name = "hermetic_cc_toolchain", version = "4.0.1")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "rules_proto_grpc", version = "5.7.1")
bazel_dep(name = "rules_proto_grpc_cpp", version = "5.7.1")
bazel_dep(name = "rules_proto_grpc_go", version = "5.7.1")
bazel_dep(name = "rules_proto_grpc_python", version = "5.7.1")
bazel_dep(name = "rules_proto_grpc_grpc_gateway", version = "5.7.1")
bazel_dep(name = "grpc_ecosystem_grpc_gateway", version = "2.27.2")
bazel_dep(name = "apple_support", version = "1.23.1", repo_name = "build_bazel_apple_support")

archive_override(
    module_name = "grpc_ecosystem_grpc_gateway",
    integrity = "sha256-t5Pw041XnE/hKJyTInDHx3dAtE7pYpOYywcn6YptzP8=",
    urls = ["https://github.com/grpc-ecosystem/grpc-gateway/releases/download/v2.27.2/grpc-gateway-v2.27.2.tar.gz"],
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = PTYHON_VERSION,
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "core_pip",
    python_version = PTYHON_VERSION,
    requirements_darwin = "//:requirements_macos.txt",
    requirements_linux = "//:requirements_linux.txt",
)
use_repo(pip, "core_pip")

dev_pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
dev_pip.parse(
    hub_name = "core_pypi",
    python_version = PTYHON_VERSION,
    requirements_lock = "//tools:requirements.txt",
)
use_repo(dev_pip, "core_pypi")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(
    version = "1.24.7",
)
go_sdk.nogo(nogo = "//:my_nogo")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")

# to be removed as dependency
#
go_deps.module_override(
    patch_strip = 1,
    patches = ["//third_party:com_github_ethereum_go_ethereum_secp256k1.patch"],
    path = "github.com/ethereum/go-ethereum",
)
go_deps.gazelle_default_attributes(
    directives = ["gazelle:proto disable"],
)

#
#
go_deps.from_file(go_mod = "//:go.mod")
use_repo(go_deps, "com_github_ethereum_go_ethereum", "com_github_matoous_go_nanoid_v2", "com_github_pkg_errors", "com_github_sentioxyz_golang_lru", "com_github_shopspring_decimal", "com_github_stretchr_testify", "in_gopkg_natefinch_lumberjack_v2", "in_gopkg_yaml_v3", "io_gorm_datatypes", "io_gorm_gorm", "io_opentelemetry_go_contrib_instrumentation_net_http_otelhttp", "io_opentelemetry_go_otel", "io_opentelemetry_go_otel_exporters_otlp_otlpmetric_otlpmetricgrpc", "io_opentelemetry_go_otel_exporters_otlp_otlptrace", "io_opentelemetry_go_otel_exporters_otlp_otlptrace_otlptracegrpc", "io_opentelemetry_go_otel_exporters_stdout_stdoutmetric", "io_opentelemetry_go_otel_exporters_stdout_stdouttrace", "io_opentelemetry_go_otel_metric", "io_opentelemetry_go_otel_sdk", "io_opentelemetry_go_otel_sdk_metric", "io_opentelemetry_go_otel_trace", "org_golang_google_genproto", "org_golang_google_protobuf", "org_golang_x_exp", "org_modernc_mathutil", "org_uber_go_zap")

go_tool_deps = use_extension("@gazelle//:extensions.bzl", "go_deps", isolate = True)
go_tool_deps.from_file(go_mod = "//tools:go.mod")
use_repo(go_tool_deps, "com_github_grpc_ecosystem_protoc_gen_grpc_gateway_ts")

## Nodejs
node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node", dev_dependency = True)
node.toolchain(node_version = "22.20.0")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    # bins = {
    #     "next": ["next=./dist/bin/next"],
    # },
    data = [
        "@//:package.json",
        "@//:packages/chain/package.json",
        "@//:pnpm-workspace.yaml",
    ],
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    update_pnpm_lock = True,
)
use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")
pnpm.pnpm(
    name = "pnpm",
    pnpm_version = "10.16.1",
)
use_repo(pnpm, "pnpm")

rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext", dev_dependency = True)
rules_ts_ext.deps(
    # curl --silent https://registry.npmjs.org/typescript/5.9.2 | jq -r '.dist.integrity'
    ts_integrity = "sha512-CWBzXQrc/qOkhidw1OzBTQuYRbfyxDXJMVJ1XNwUHGROVmuaeiEm3OslpZ1RV96d7SKKjZKrSJu3+t/xlw3R9A==",
    ts_version_from = "//:package.json",
)
use_repo(rules_ts_ext, "npm_typescript")

### Additional CC Toolchains for cross compile

toolchains = use_extension("@hermetic_cc_toolchain//toolchain:ext.bzl", "toolchains")
use_repo(toolchains, "zig_sdk")

register_toolchains(
    "@zig_sdk//toolchain:linux_amd64_gnu.2.31",
    #    "@zig_sdk//toolchain:linux_arm64_gnu.2.31",
    #    "@zig_sdk//toolchain:windows_amd64",
    #    "@zig_sdk//toolchain:windows_arm64",
)

### OCI Image plugin
PLATFORMS = [
    "linux/amd64",
    #        "linux/arm64",
]
