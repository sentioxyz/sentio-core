import {
  AptosChainId,
  BTCChainId,
  ChainId,
  ChainType,
  ChainIdToType,
  CosmosChainId,
  EthChainId,
  FuelChainId,
  SolanaChainId,
  StarknetChainId,
  SuiChainId,
  NonEthChainId
} from '../chain-id'
import {
  EthChainInfo,
  EthVariation,
  ExplorerApiType,
  NonEthChainInfo
} from '../chain-info'
import { writeFileSync } from 'node:fs'
import { camelCase, upperFirst } from 'lodash'

function getGoVariableName(name: string): string {
  return name
    .split('_')
    .map((part) => {
      if (part.toUpperCase() === 'BTC') {
        return 'BTC'
      }
      return upperFirst(part.toLowerCase())
    })
    .join('')
}

function getGoChainConstantName(name: string): string {
  const baseName = getGoVariableName(name)
  if (baseName === 'Bsc') {
    return 'BSCID'
  }
  return baseName + 'ID'
}

const chainTypeToChainIdString: Record<ChainType, string> = {
  [ChainType.SOLANA]: 'SolanaChainID',
  [ChainType.SUI]: 'SuiChainID',
  [ChainType.APTOS]: 'AptosChainID',
  [ChainType.ETH]: 'EthChainID',
  [ChainType.BTC]: 'BTCChainID',
  [ChainType.COSMOS]: 'CosmosChainID',
  [ChainType.STARKNET]: 'StarknetChainID',
  [ChainType.FUEL]: 'FuelChainID'
}

const chainTypeToChainId: Record<ChainType, object> = {
  [ChainType.SOLANA]: SolanaChainId,
  [ChainType.SUI]: SuiChainId,
  [ChainType.APTOS]: AptosChainId,
  [ChainType.ETH]: EthChainId,
  [ChainType.BTC]: BTCChainId,
  [ChainType.COSMOS]: CosmosChainId,
  [ChainType.STARKNET]: StarknetChainId,
  [ChainType.FUEL]: FuelChainId
}

const chainTypeToTypeName = new Map<string, string>()
for (const [key, value] of Object.entries(ChainType)) {
  chainTypeToTypeName.set(value, key)
}

const chainIdToChainKey = new Map<string, string>()
for (const [key, value] of Object.entries(ChainId)) {
  chainIdToChainKey.set(value, key)
}

const EXPLORER_API_TYPE_TO_KEY = new Map<ExplorerApiType, string>()
for (const [key, value] of Object.entries(ExplorerApiType)) {
  EXPLORER_API_TYPE_TO_KEY.set(value as ExplorerApiType, key)
}

function getGoExplorerAPIType(apiType?: ExplorerApiType) {
  if (!apiType) {
    return 'ExplorerAPITypeUnknown'
  }
  return `ExplorerAPIType${upperFirst(camelCase(EXPLORER_API_TYPE_TO_KEY.get(apiType) || ''))}`
}

const VARIATION_VALUE_TO_KEY = new Map<EthVariation, string>()
for (const [key, value] of Object.entries(EthVariation)) {
  VARIATION_VALUE_TO_KEY.set(value as EthVariation, key)
}

function getGoVariationName(variation: EthVariation) {
  if (variation === EthVariation.POLYGON_ZKEVM) {
    return 'EthVariationPolygonZkEVM'
  }
  if (variation === EthVariation.ZKSYNC) {
    return 'EthVariationZkSync'
  }
  const key = VARIATION_VALUE_TO_KEY.get(variation)
  if (!key) {
    // console.log(key)
    throw new Error(`Unknown variation: ${variation}`)
  }
  return (
    'EthVariation' +
    upperFirst(camelCase(VARIATION_VALUE_TO_KEY.get(variation)))
  )
}

let chainIdGenerated = `// This code is generated by packages/chain/src/codegen/generate-chain-id-go.ts, please do not modify directly
package chains
`

chainIdGenerated += `
type ChainType string
const (
  ${Object.entries(ChainType)
    .map(([key, value]) => {
      if (key === 'BTC') {
        return `BTCChainType ChainType = "${value}"`
      }
      return `${upperFirst(camelCase(key))}ChainType ChainType = "${value}"`
    })
    .join('\n\t')}
)
`

function generateChainId(chainIdString: string, chainId: object) {
  return `
type ${chainIdString} string
const (
  ${Object.entries(chainId)
    .map(
      ([chainIdKey, chainIdValue]: [string, string]) =>
        `${getGoChainConstantName(chainIdKey)} ${chainIdString} = "${chainIdValue}"`
    )
    .join('\n  ')}
)
var ${chainIdString}s = []${chainIdString}{${Object.keys(chainId).map(getGoChainConstantName).join(', ')}}
`
}

for (const [chainType, chainId] of Object.entries(chainTypeToChainId)) {
  const chainIdString = chainTypeToChainIdString[chainType as ChainType]
  chainIdGenerated += generateChainId(chainIdString, chainId)
}

chainIdGenerated += `
type ChainID string
var ChainIDs = []ChainID{${Object.keys(ChainId)
  .map((chainIdKey) => `ChainID(${getGoChainConstantName(chainIdKey || '')})`)
  .join(', ')}}
`

chainIdGenerated += `
var ChainIDToType = map[ChainID]ChainType{
  ${[...ChainIdToType.entries()]
    .map(
      ([chainId, chainType]) =>
        `ChainID(${getGoChainConstantName(chainIdToChainKey.get(chainId)!)}): ${chainTypeToTypeName.get(chainType) === 'BTC' ? 'BTC' : upperFirst(camelCase(chainTypeToTypeName.get(chainType)!))}ChainType,`
    )
    .join('\n\t')}
}
`

let chainInfoGenerated = `// This code is generated by packages/chain/src/codegen/generate-chain-id-go.ts, please do not modify directly
package chains

import "github.com/ethereum/go-ethereum/common"

var EthChains = []*EthChainInfo{${Object.keys(EthChainId)
  .map((k) => `&${getGoVariableName(k)}Info`)
  .join(', ')}}

var Chains = []*ChainInfo{}
`

for (const [chainIdKey, chainId] of Object.entries(EthChainId)) {
  const chainInfo = EthChainInfo[chainId]
  chainInfoGenerated += `
var ${getGoVariableName(chainIdKey)}Info = EthChainInfo{
  ChainInfo: ChainInfo{
    Name: "${chainInfo.name}",
    Slug: "${chainInfo.slug}",
    AdditionalSlugs: []string{${chainInfo.additionalSlugs ? chainInfo.additionalSlugs.map((s) => `"${s}"`).join(', ') : ''}},
    MainnetChainID: ChainID(${getGoChainConstantName(chainIdToChainKey.get(chainInfo.mainnetChainId || chainInfo.chainId)!)}),
    ChainID: ChainID(${getGoChainConstantName(chainIdToChainKey.get(chainInfo.chainId)!)}),
    ExplorerURL: "${chainInfo.explorerUrl}",
  },
  Variation: ${getGoVariationName(chainInfo.variation)},
  TokenSymbol: "${chainInfo.tokenSymbol}",
  TokenDecimals: ${chainInfo.tokenDecimals},
  TokenAddress: common.HexToAddress("${chainInfo.tokenAddress}"),
  PriceTokenAddress: common.HexToAddress("${chainInfo.priceTokenAddress}"),
  WrappedTokenAddress: common.HexToAddress("${chainInfo.wrappedTokenAddress}"),
  ExplorerAPI: "${chainInfo.explorerApi || ''}",
  ExplorerAPIType: ${getGoExplorerAPIType(chainInfo.explorerApiType)},
}
`
}

for (const [chainIdKey, chainId] of Object.entries(NonEthChainId)) {
  const chainInfo = NonEthChainInfo[chainId]

  chainInfoGenerated += `
var ${getGoVariableName(chainIdKey)}Info = ChainInfo{
  Name: "${chainInfo.name}",
  Slug: "${chainInfo.slug}",
  AdditionalSlugs: []string{${chainInfo.additionalSlugs ? chainInfo.additionalSlugs.map((s: string) => `"${s}"`).join(', ') : ''}},
  ChainID: ChainID(${getGoChainConstantName(chainIdToChainKey.get(chainInfo.chainId)!)}),
  MainnetChainID: ChainID(${getGoChainConstantName(chainIdToChainKey.get(chainInfo.mainnetChainId || chainInfo.chainId)!)}),
  ExplorerURL: "${chainInfo.explorerUrl}",
}
`
}

const nonEthChainVars = Object.entries(NonEthChainId).map(
  ([chainIdKey, chainId]) => `&${getGoVariableName(chainIdKey)}Info`
)

chainInfoGenerated += `

var NonEthChains = []*ChainInfo{${nonEthChainVars.join(', ')}}

`

console.log('Generated chain_id.go and chain_info.go')
writeFileSync('../../common/chains/chain_id.go', chainIdGenerated)
writeFileSync('../../common/chains/chain_info.go', chainInfoGenerated)
