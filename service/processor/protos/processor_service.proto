syntax = "proto3";

package processor_service;

option go_package = "sentioxyz/sentio-core/service/processor/protos";

import "google/api/annotations.proto";
import "google/api/visibility.proto";
import "google/protobuf/timestamp.proto";
import "service/common/protos/common.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

service ProcessorService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    name: "Processor"
  };
  // Private API below:
  // Get processors belongs to the given project id.
  rpc GetProcessors (GetProcessorsRequest) returns (GetProcessorsResponse);

  // Get processor of the given processor id.
  rpc GetProcessor (GetProcessorRequest) returns (GetProcessorResponse);

  // Get processor of the given processor id, and the project which the processor belongs to
  rpc GetProcessorWithProject (GetProcessorRequest) returns (GetProcessorWithProjectResponse);

  // Updates a processor status of a given chain and processor.
  rpc UpdateChainProcessorStatus (UpdateChainProcessorStatusRequest) returns (UpdateChainProcessorStatusResponse);

  rpc RemoveProcessorInternal (ProcessorIdRequest) returns (google.protobuf.Empty);

  rpc DownloadProcessor (DownloadProcessorRequest) returns (DownloadProcessorResponse);

  rpc GetProcessorStatusInternal (GetProcessorStatusRequest) returns (GetProcessorStatusResponse);

  rpc GetProcessorStatus (GetProcessorStatusRequest) returns (GetProcessorStatusResponse) {
    option (google.api.method_visibility).restriction = "INTERNAL";

    option (google.api.http) = {
      get: "/api/v1/processors/status"
    };
  };

  // Get processor status
  rpc GetProcessorStatusV2 (GetProcessorStatusRequestV2) returns (GetProcessorStatusResponse) {
    option (common.auth) = {
      permission: "project:read"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    };
    option (google.api.http) = {
      get: "/api/v1/processors/{project_owner}/{project_slug}/status"
    };
  };

  rpc RemoveProcessor (ProcessorIdRequest) returns (RemoveProcessorResponse) {
    option (common.auth) = {
      permission: "project:write"
    };
    option (google.api.method_visibility).restriction = "INTERNAL";

    option (google.api.http) = {
      delete: "/api/v1/processors/{id}"
    };
  };

  rpc GetProcessorUpgradeHistories (GetProcessorUpgradeHistoryRequest) returns (GetProcessorUpgradeHistoryResponse) {
    option (common.auth) = {
      permission: "project:read"
    };
    option (google.api.method_visibility).restriction = "INTERNAL";

    option (google.api.http) = {
      get: "/api/v1/processors/{processor_id}/history"
    };
  }

  rpc PauseProcessor (GetProcessorRequest) returns (google.protobuf.Empty) {
    option (common.auth) = {
      permission: "project:write"
    };
    option (google.api.method_visibility).restriction = "INTERNAL";

    option (google.api.http) = {
      put: "/api/v1/processors/{processor_id}/pause"
    };
  };

  rpc ResumeProcessor (GetProcessorRequest) returns (google.protobuf.Empty) {
    option (common.auth) = {
      permission: "project:write"
    };
    option (google.api.method_visibility).restriction = "INTERNAL";

    option (google.api.http) = {
      put: "/api/v1/processors/{processor_id}/resume"
    };
  };

  rpc SetVersionActive (GetProcessorRequest) returns (google.protobuf.Empty) {
    option (common.auth) = {
      permission: "project:write"
    };
    option (google.api.method_visibility).restriction = "INTERNAL";

    option (google.api.http) = {
      put: "/api/v1/processors/{processor_id}/active"
    };
  };

  // activate the pending version of a processor
  rpc ActivatePendingVersion (ActivatePendingRequest) returns (google.protobuf.Empty) {
    option (common.auth) = {
      permission: "project:write"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    };
    option (google.api.http) = {
      put: "/api/v1/processors/{project_owner}/{project_slug}/activate_pending"
    };
  };

  rpc RestartProcessor (GetProcessorRequest) returns (google.protobuf.Empty) {
    option (common.auth) = {
      permission: "project:write"
    };
    option (google.api.method_visibility).restriction = "INTERNAL";

    option (google.api.http) = {
      put: "/api/v1/processors/{processor_id}/restart"
    };
  };

  rpc InitUpload (InitUploadRequest) returns (InitUploadResponse) {
    option (common.auth) = {
      permission: "project:write"
    };
    option (google.api.method_visibility).restriction = "INTERNAL";

    option (google.api.http) = {
      post: "/api/v1/processors/init_upload",
      body: "*"
    };
  }

  rpc FinishUpload (FinishUploadRequest) returns (FinishUploadResponse) {
    option (common.auth) = {
      permission: "project:write"
    };
    option (google.api.method_visibility).restriction = "INTERNAL";

    option (google.api.http) = {
      post: "/api/v1/processors/finish_upload",
      body: "*"
    };
  }

  rpc InitBatchUpload (InitBatchUploadRequest) returns (InitBatchUploadResponse) {
    option (common.auth) = {
      permission: "project:write"
    };
    option (google.api.method_visibility).restriction = "INTERNAL";

    option (google.api.http) = {
      post: "/api/v1/processors/init_batch_upload",
      body: "*"
    };
  }

  rpc FinishBatchUpload (FinishBatchUploadRequest) returns (FinishBatchUploadResponse) {
    option (common.auth) = {
      permission: "project:write"
    };
    option (google.api.method_visibility).restriction = "INTERNAL";

    option (google.api.http) = {
      post: "/api/v1/processors/finish_batch_upload",
      body: "*"
    };
  }
}

message InitUploadRequest {
  string project_slug = 1;
  string sdk_version = 2;
  int32 sequence = 3; // 0. lib.js 1. code.zip 2. subgraph upload
  string content_type = 4;
}

enum StorageEngine {
  DEFAULT = 0;
  S3 = 1;
  GCS = 2;
  SUBGRAPH = 3; // special engine for subgraph project
  WALRUS = 4;
  IPFS = 5;
}
enum FileType {
  PROCESSOR = 0;
  SOURCE = 1;
}

message InitUploadResponse {
  string url = 1;
  string warning = 2;
  int32 replacing_version = 3;
  bool multi_version = 4;
  string project_id = 5;
}

message NetworkOverride {
  string chain = 1;
  string host = 2;
}

message FinishUploadRequest {
  string project_slug = 1;
  string sdk_version = 2;
  string sha256 = 3;
  string commit_sha = 4;
  string git_url = 5;
  bool debug = 6;
  int32 sequence = 7;
  int32 continue_from = 8;
  string cli_version = 9;
  repeated NetworkOverride network_overrides = 10;
  repeated string warnings = 11;
  bool binary = 12;
}

message FinishUploadResponse {
  string project_full_slug = 1;
  int32 version = 2;
  string processor_id = 3;
}

message InitBatchUploadRequest {
  string project_slug = 1;
  string project_owner = 2;
  string sdk_version = 3;
  StorageEngine engine = 4;
  map <string,FileType> file_types = 5; // map of file_key to file_type
}

message UploadPayload {
  oneof payload {
    ObjectPayload object= 1;
    WalrusPayload walrus = 2;
  }
  message ObjectPayload {
    string put_url = 1;
    string bucket = 2;
    string object_id = 3;
    string file_id = 4;
  }
  message WalrusPayload {
    string put_url = 1;
    string jwt_token = 2;
    string file_id = 3;
    string blob_id = 4;
    string quilt_patch_id = 5;
  }
  FileType file_type = 3;
}

message InitBatchUploadResponse {
  string warning = 1;
  int32 replacing_version = 2;
  bool multi_version = 3;
  string project_id = 4;
  StorageEngine engine = 5; // the storage engine to use
  map<string, UploadPayload> payloads = 6; // map of file_key to payload for each file
}

message FinishBatchUploadRequest {
  string project_slug = 1;
  string project_owner = 2;
  string sdk_version = 3;
  map<string, string> sha256_map = 4; // map of file_key to sha256
  string commit_sha = 5;
  string git_url = 6;
  bool debug = 7;
  int32 continue_from = 8;
  string cli_version = 9;
  repeated NetworkOverride network_overrides = 10;
  repeated string warnings = 11;
  bool binary = 12; // whether the processor is binary(otherwise nodejs)
  StorageEngine engine = 13;
  map<string, UploadPayload> payloads = 14; // map of file_key to payload received from init batch upload
}

message FinishBatchUploadResponse {
  string project_full_slug = 1;
  int32 version = 2;
  string processor_id = 3;
}

message DownloadProcessorRequest {
  string processor_id = 1;
}

message DownloadProcessorResponse {
  string url = 1;
}


message GetProcessorsRequest {
  string project_id = 1;
}

message GetProcessorsResponse {
  repeated Processor processors = 1;
}

message GetProcessorRequest {
  string processor_id = 1;
}

message GetProcessorResponse {
  Processor processor = 1;
}

message GetProcessorWithProjectResponse {
  Processor processor = 1;
  common.Project project = 2;
}

message UpdateChainProcessorStatusRequest {
  // This is the processor id.
  string id = 1;
  ChainState chain_state = 2;
}

message UpdateChainProcessorStatusResponse {
}

message ChainState {
  // The chain id.
  string chain_id = 1;

  // The most recently processed block number and block hash.
  int64 processed_block_number = 2;
  int64 processed_timestamp_micros = 15;
  string processed_block_hash = 3;

  // Processed version
  int32 processed_version = 6;

  // Status of this chain indexer
  message Status {
    enum State {
      UNKNOWN = 0;
      ERROR = 1;
      CATCHING_UP = 2;
      PROCESSING_LATEST = 3;
      QUEUING = 4;
    }
    State state = 1;
    // This field is set if state is ERROR.
    common.ErrorRecord error_record = 3;
  }
  Status status = 7;

  google.protobuf.Timestamp updated_at = 8;

  // The serialized templates info.
  string templates = 9;

  // The serialized indexer state.
  string indexer_state = 13;

  // The serialized meter state.
  string meter_state = 14;

  // The serialized handler stat
  string handler_stat = 18;

  int64 initial_start_block_number = 16;
  int64 estimated_latest_block_number = 17;

  // To be deprecated after the migration.
  string trackers = 10;
  reserved 11, 12, 4, 5;
}

// This represents a processor which backend works on.
message Processor {
  // The unique processor id.
  string processor_id = 1;

  // The project this processor belongs to.
  string project_id = 2;

  // The version of the code_url below.
  int32 version = 3;

  // The SDK version used when uploaded
  string sdk_version = 5;

  // Call should be able to fetch the code to run from code_url.
  string code_url = 4;

  // Each maintains a state of a processor w.r.t a given chain.
  // This is a one-to-many mapping (processor to processor-chain)
  repeated ChainState chain_states = 6;

  // If non empty, this is the contract associated with the processor.
  string contract_id = 7;

  ProcessorVersionState version_state = 8;

  // If enabled, driver job's log level will be set to debug
  bool debug = 9;

  // The timescale-db sharding index of this processor.
  int32 timescale_sharding_index = 10;

  // The version label of the subgraph
  // used for subgraph project
  string version_label = 11;

  // The hash (object CID) of the subgraph description file in ipfs node
  // used for subgraph project
  string ipfs_hash = 12;

  // ID of a remote subgraph whose store will be GraphQL queried
  // used for subgraph project
  string debug_fork = 13;

  // The created timestamp of the processor.
  int64 created_at = 14;

  // The clickhouse sharding index of this processor.
  int32 clickhouse_sharding_index = 15;

  // The k8s cluster id of this processor
  int32 k8s_cluster_id = 19;

  bool enable_materialized_view = 16 [deprecated = true];

  string reference_project_id = 17;

  repeated NetworkOverride network_overrides = 18;

  int32 eventlog_migrate_status = 20;

  int32 eventlog_version = 21;

  bool pause = 22;

  int32 entity_schema_version = 23;

  int32 driver_version = 25;

  bool is_binary = 24;
}

message ProcessorUpgradeHistory {
  int32 index = 2;
  google.protobuf.Timestamp uploaded_at = 3;
  google.protobuf.Timestamp obsolete_at = 4;
  Processor snapshot = 1;
  string id = 5;
}

message GetProcessorStatusRequest {
  oneof get_metrics_by {
    string project_id = 1;
    string id = 2;
  }
}

message GetProcessorStatusRequestV2 {
  enum VersionSelector {
    // Only active version
    ACTIVE = 0;
    // Only pending versions
    PENDING = 1;
    // All version
    ALL = 2;

  }
  string project_owner = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {field_configuration: {path_param_name: "owner"}}];
  string project_slug = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {field_configuration: {path_param_name: "slug"}}];

  VersionSelector version = 3;
}

enum ProcessorVersionState {
  UNKNOWN = 0;
  PENDING = 1;
  ACTIVE = 2;
  OBSOLETE = 3;
}

message GetProcessorStatusResponse {
  repeated ProcessorEx processors = 1;
  message ProcessorEx {
    repeated ChainState states = 2;
    string processor_id = 3;
    string code_hash = 4;
    string commit_sha = 5;
    common.UserInfo uploaded_by = 6;
    google.protobuf.Timestamp uploaded_at = 7;
    // The processor status.
    ProcessorStatus processor_status = 8;
    int32 version = 9;
    string sdk_version = 10;
    string git_url = 11;
    ProcessorVersionState version_state = 12;
    string version_label = 13;
    string ipfs_hash = 14;
    string debug_fork = 15;
    string cli_version = 16;
    string reference_project_id = 17;
    repeated string warnings = 18;
    bool pause = 19;
    repeated NetworkOverride network_overrides = 20;
  }

  message ProcessorStatus {
    enum State {
      UNKNOWN = 0;
      ERROR = 1;
      STARTING = 3;
      PROCESSING = 2;
    }
    State state = 1;
    // This field is set if state is ERROR.
    common.ErrorRecord error_record = 3;
  }
}

message ProcessorIdRequest {
  string id = 1;
}

message RemoveProcessorResponse {
  Processor deleted = 1;
}

message ActivatePendingRequest {
  string project_owner = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {field_configuration: {path_param_name: "owner"}}];
  string project_slug = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {field_configuration: {path_param_name: "slug"}}];
}

message GetProcessorUpgradeHistoryRequest {
  string processor_id = 1;
}

message GetProcessorUpgradeHistoryResponse {
  repeated ProcessorUpgradeHistory histories = 1;
}