syntax = "proto3";

package webhook_service;

option go_package = "sentioxyz/sentio-core/service/webhook/protos";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "service/common/protos/common.proto";

service WebhookService {
  // create pubsub subscription
  // should be called when the processor (with exporter config) is being created
  rpc CreateSubscription (CreateSubscriptionRequest) returns (google.protobuf.Empty);

  // delete pubsub subscription
  // should be called when the processor is being deleted, won't return error if not found
  rpc DeleteSubscription (DeleteSubscriptionRequest) returns (google.protobuf.Empty);

  // save channel state
  // should be called when the channel is being created or updated
  rpc SaveChannel (SaveChannelRequest) returns (google.protobuf.Empty);

  rpc DeleteChannel (DeleteChannelRequest) returns (google.protobuf.Empty);

  // pull messages from deadletter topic
  rpc GetDeadletter (GetDeadletterRequest) returns (GetDeadletterResponse) {
    option (google.api.http) = {
      get: "/api/v1/webhook/deadletter/{owner_and_slug.owner_name}/{owner_and_slug.slug}"
      additional_bindings {
        get: "/api/v1/webhook/deadletter/{project_id}"
      }
    };
  };
}

message CreateSubscriptionRequest {
  string processor_id = 1;
}

message DeleteSubscriptionRequest {
  string processor_id = 1;
}

message SaveChannelRequest {
  string project_id = 1;
  string name = 2;
}

message DeleteChannelRequest {
  string project_id = 1;
  string name = 2;
}

message GetDeadletterRequest {
  oneof get_project_by {
    string project_id = 1;
    common.ProjectOwnerAndSlug owner_and_slug = 2;
  }
  int32 limit = 3;
}

message GetDeadletterResponse {
  repeated Message messages = 1;
}

message Message {
  string id = 1;
  string data = 2;
  map<string, string> attributes = 3;
}